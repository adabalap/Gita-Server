import sqlite3
import os

DATABASE_NAME = 'geetha_telugu.db'

def get_db_connection():
    """Establishes and returns a connection to the SQLite database."""
    conn = sqlite3.connect(DATABASE_NAME)
    conn.row_factory = sqlite3.Row  # Allows accessing columns by name
    return conn

def init_db():
    """
    Initializes the database by creating the verses table if it doesn't exist.
    Includes columns for original, polished text, and description.
    """
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS verses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chapter INTEGER NOT NULL,
            verse INTEGER NOT NULL,
            telugu_verse TEXT NOT NULL,         -- Original verse fetched from API
            telugu_meaning TEXT NOT NULL,       -- Original meaning fetched from API
            polished_telugu_verse TEXT,         -- Polished verse text
            polished_telugu_meaning TEXT,       -- Polished meaning text
            telugu_description TEXT,            -- Short story/description
            UNIQUE(chapter, verse)              -- Ensure unique chapter-verse pairs
        )
    ''')
    conn.commit()
    conn.close()
    print(f"Database '{DATABASE_NAME}' initialized (checked/updated schema).")

def get_verse_from_db(chapter, verse):
    """Retrieves a specific verse and meaning from the database."""
    conn = get_db_connection()
    cursor = conn.cursor()
    # Fetch all columns, including the new ones
    cursor.execute('SELECT * FROM verses WHERE chapter = ? AND verse = ?', (chapter, verse))
    row = cursor.fetchone()
    conn.close()
    return row

def insert_verse_into_db(chapter, verse, telugu_verse, telugu_meaning):
    """Inserts a new verse and meaning into the database."""
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        # Insert only the original fetched data initially
        cursor.execute('''
            INSERT INTO verses (chapter, verse, telugu_verse, telugu_meaning)
            VALUES (?, ?, ?, ?)
        ''', (chapter, verse, telugu_verse, telugu_meaning))
        conn.commit()
        print(f"Inserted Chapter {chapter}, Verse {verse} (original) into database.")
        return True
    except sqlite3.IntegrityError:
        print(f"Chapter {chapter}, Verse {verse} already exists in database.")
        return False
    finally:
        conn.close()

def update_verse_with_enhancements(chapter, verse, polished_verse, polished_meaning, description):
    """Updates an existing verse record with polished text and description."""
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            UPDATE verses
            SET polished_telugu_verse = ?,
                polished_telugu_meaning = ?,
                telugu_description = ?
            WHERE chapter = ? AND verse = ?
        ''', (polished_verse, polished_meaning, description, chapter, verse))
        conn.commit()
        print(f"Updated Chapter {chapter}, Verse {verse} with polished text and description.")
        return True
    except Exception as e:
        print(f"Error updating Chapter {chapter}, Verse {verse}: {e}")
        return False
    finally:
        conn.close()

def get_verses_to_enhance():
    """Retrieves verses from the database that need polishing and description."""
    conn = get_db_connection()
    cursor = conn.cursor()
    # Select verses where polished_telugu_verse or telugu_description is NULL
    cursor.execute('''
        SELECT chapter, verse, telugu_verse, telugu_meaning
        FROM verses
        WHERE polished_telugu_verse IS NULL OR telugu_description IS NULL
        ORDER BY chapter, verse
    ''')
    rows = cursor.fetchall()
    conn.close()
    return rows

# Initialize the database when the module is imported
init_db()

