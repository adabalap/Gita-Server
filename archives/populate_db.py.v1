import time
import database
import gemini_utils

# Define the number of verses in each chapter of the Bhagavad Gita
# Based on search results (e.g., Wikipedia, Bhagavad Gita websites)
CHAPTER_VERSE_COUNTS = {
    1: 46,
    2: 72,
    3: 43,
    4: 42,
    5: 29,
    6: 47,
    7: 30,
    8: 28,
    9: 34,
    10: 42,
    11: 55,
    12: 20,
    13: 35,
    14: 27,
    15: 20,
    16: 24,
    17: 28,
    18: 78,
}

# Small delay between API calls to avoid hitting rate limits
API_CALL_DELAY_SECONDS = 2 # Adjust as needed

def populate_database():
    """
    Iterates through all chapters and verses, fetches data from Gemini
    if not in DB, and populates the database.
    """
    print("Starting database population...")

    # Ensure the database table exists
    database.init_db()

    total_chapters = len(CHAPTER_VERSE_COUNTS)
    for chapter in range(1, total_chapters + 1):
        verses_in_chapter = CHAPTER_VERSE_COUNTS.get(chapter, 0)
        if verses_in_chapter == 0:
            print(f"Warning: No verse count found for Chapter {chapter}. Skipping.")
            continue

        print(f"\nProcessing Chapter {chapter} with {verses_in_chapter} verses...")

        for verse in range(1, verses_in_chapter + 1):
            print(f"  Checking Chapter {chapter}, Verse {verse}...")

            # Check if the verse is already in the database
            verse_data = database.get_verse_from_db(chapter, verse)

            if verse_data:
                print(f"  Chapter {chapter}, Verse {verse} already exists in DB. Skipping fetch.")
            else:
                print(f"  Chapter {chapter}, Verse {verse} not in DB. Fetching from Gemini...")
                # Fetch the verse and meaning from Gemini
                telugu_verse, telugu_meaning = gemini_utils.fetch_verse_from_gemini(chapter, verse)

                if telugu_verse and telugu_meaning:
                    print(f"  Successfully fetched Chapter {chapter}, Verse {verse}. Inserting into DB.")
                    # Insert the fetched data into the database
                    database.insert_verse_into_db(chapter, verse, telugu_verse, telugu_meaning)
                else:
                    print(f"  Failed to fetch Chapter {chapter}, Verse {verse} from Gemini.")
                    # You might want to log failed attempts or retry here

                # Wait for a short duration before the next API call
                time.sleep(API_CALL_DELAY_SECONDS)

    print("\nDatabase population process finished.")

if __name__ == '__main__':
    populate_database()

