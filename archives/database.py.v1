import sqlite3
import os

DATABASE_NAME = 'geetha_telugu.db'

def get_db_connection():
    """Establishes and returns a connection to the SQLite database."""
    conn = sqlite3.connect(DATABASE_NAME)
    conn.row_factory = sqlite3.Row  # Allows accessing columns by name
    return conn

def init_db():
    """Initializes the database by creating the verses table if it doesn't exist."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS verses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chapter INTEGER NOT NULL,
            verse INTEGER NOT NULL,
            telugu_verse TEXT NOT NULL,
            telugu_meaning TEXT NOT NULL,
            UNIQUE(chapter, verse) -- Ensure unique chapter-verse pairs
        )
    ''')
    conn.commit()
    conn.close()
    print(f"Database '{DATABASE_NAME}' initialized.")

def get_verse_from_db(chapter, verse):
    """Retrieves a specific verse and meaning from the database."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM verses WHERE chapter = ? AND verse = ?', (chapter, verse))
    row = cursor.fetchone()
    conn.close()
    return row

def insert_verse_into_db(chapter, verse, telugu_verse, telugu_meaning):
    """Inserts a new verse and meaning into the database."""
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT INTO verses (chapter, verse, telugu_verse, telugu_meaning)
            VALUES (?, ?, ?, ?)
        ''', (chapter, verse, telugu_verse, telugu_meaning))
        conn.commit()
        print(f"Inserted Chapter {chapter}, Verse {verse} into database.")
        return True
    except sqlite3.IntegrityError:
        print(f"Chapter {chapter}, Verse {verse} already exists in database.")
        return False
    finally:
        conn.close()

# Initialize the database when the module is imported
init_db()

